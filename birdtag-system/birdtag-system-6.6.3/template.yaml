AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BirdTag Serverless - AWS Academy Version

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref BirdTagMetadataTable
        MEDIA_BUCKET: !Ref MediaBucket
        UPLOAD_PREFIX: uploads/
        THUMBNAIL_PREFIX: thumbnails/

Parameters:
  StudentName:
    Type: String
    Description: Your name to make resources unique

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub birdtag-users-${StudentName}
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub birdtag-client-${StudentName}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - http://localhost:3000/callback
        - http://localhost:5173/home
      LogoutURLs:
        - http://localhost:3000/logout
        - http://localhost:5173/
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO

  # S3 Bucket for all media files
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub birdtag-media-${StudentName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 30
            Prefix: uploads/
          - Id: DeleteOldThumbnails
            Status: Enabled
            ExpirationInDays: 30
            Prefix: thumbnails/

  # S3 Bucket for model files
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub birdtag-models-${StudentName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # DynamoDB Table
  BirdTagMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub BirdTagMetadata-${StudentName}
      AttributeDefinitions:
        - AttributeName: fileKey
          AttributeType: S
      KeySchema:
        - AttributeName: fileKey
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Layers
  BirdDetectionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-detection-deps-${StudentName}
      Description: Dependencies for Bird Detection
      ContentUri: layers/bird_detection/
      CompatibleRuntimes:
        - python3.9

  BirdNetAnalyzerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-analyzer-deps-${StudentName}
      Description: Dependencies for BirdNET Analyzer
      ContentUri: layers/birdnet_analyzer/
      CompatibleRuntimes:
        - python3.11

  FFmpegLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-ffmpeg-${StudentName}
      Description: FFmpeg for media processing
      ContentUri: layers/ffmpeg/
      CompatibleRuntimes:
        - python3.9

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-auth-${StudentName}
      CodeUri: src/handlers/
      Handler: auth_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-upload-${StudentName}
      CodeUri: src/handlers/
      Handler: upload_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          UPLOAD_PREFIX: uploads/
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket

  ThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-thumbnail-${StudentName}
      CodeUri: src/handlers/
      Handler: thumbnail_handler.lambda_handler
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          THUMBNAIL_PREFIX: thumbnails/
          MAX_THUMBNAIL_SIZE: 200
          THUMBNAIL_QUALITY: 75
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref MediaBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
                  - Name: suffix
                    Value: .jpg
                  - Name: suffix
                    Value: .jpeg
                  - Name: suffix
                    Value: .png

  MediaProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-media-processor-${StudentName}
      CodeUri: src/handlers/
      Handler: media_processor_handler.lambda_handler
      Runtime: python3.9
      Timeout: 300
      MemorySize: 1024
      Layers:
        - !Ref FFmpegLayer
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          VIDEO_PREVIEW_PREFIX: previews/
          AUDIO_WAVEFORM_PREFIX: waveforms/
          FFMPEG_PATH: /opt/ffmpeg/ffmpeg
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref MediaBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
                  - Name: suffix
                    Value: .mp4
                  - Name: suffix
                    Value: .avi
                  - Name: suffix
                    Value: .mov
                  - Name: suffix
                    Value: .wav
                  - Name: suffix
                    Value: .mp3
                  - Name: suffix
                    Value: .m4a

  BirdDetectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-detection-${StudentName}
      CodeUri: src/handlers/
      Handler: bird_detection_lambda.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref BirdDetectionLayer
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MODEL_BUCKET: !Ref ModelBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket

  BirdNetAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-analyzer-${StudentName}
      CodeUri: src/handlers/
      Handler: birdnet_analyzer_lambda.lambda_handler
      Runtime: python3.11
      Layers:
        - !Ref BirdNetAnalyzerLayer
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MODEL_BUCKET: !Ref ModelBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket

  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-search-${StudentName}
      CodeUri: src/handlers/
      Handler: search_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
          MEDIA_BUCKET: !Ref MediaBucket
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket

  StatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-stats-${StudentName}
      CodeUri: src/handlers/
      Handler: stats_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable

  ModelMonitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-model-monitor-${StudentName}
      CodeUri: src/handlers/
      Handler: model_monitor_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable

  FileClassifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-file-classifier-${StudentName}
      CodeUri: src/handlers/
      Handler: file_classifier_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
        - DynamoDBWritePolicy:
            TableName: !Ref BirdTagMetadataTable

  BatchProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-batch-processor-${StudentName}
      CodeUri: src/handlers/
      Handler: batch_processor_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3WritePolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
        - DynamoDBWritePolicy:
            TableName: !Ref BirdTagMetadataTable

  TagFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-tag-${StudentName}
      CodeUri: src/handlers/
      Handler: tag_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BirdTagMetadataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
        - DynamoDBWritePolicy:
            TableName: !Ref BirdTagMetadataTable

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # API Gateway Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub birdtag-authorizer-${StudentName}
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref Api
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # Lambda Permissions for S3 Events
  ThumbnailFunctionS3Permission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - MediaBucket
      - ThumbnailFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ThumbnailFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MediaBucket.Arn

  MediaProcessorFunctionS3Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MediaBucket
      - MediaProcessorFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MediaProcessorFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MediaBucket.Arn

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  MediaBucketName:
    Description: S3 Bucket for media files
    Value: !Ref MediaBucket

  ModelBucketName:
    Description: S3 Bucket for model files
    Value: !Ref ModelBucket

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
