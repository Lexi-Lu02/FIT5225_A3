AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BirdTag Serverless - AWS Academy Version

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref BirdTagMetadataTable
        MEDIA_BUCKET: !Ref MediaBucket
        UPLOAD_PREFIX: uploads/
        THUMBNAIL_PREFIX: thumbnails/

Parameters:
  StudentName:
    Type: String
    Description: Your name to make resources unique

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub birdtag-users-${StudentName}
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub birdtag-client-${StudentName}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - http://localhost:3000/callback
        - http://localhost:5173/home
      LogoutURLs:
        - http://localhost:3000/logout
        - http://localhost:5173/
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO

  # S3 Bucket for all media files
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub birdtag-media-${StudentName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 30
            Prefix: uploads/
          - Id: DeleteOldThumbnails
            Status: Enabled
            ExpirationInDays: 30
            Prefix: thumbnails/

  # S3 Bucket for model files
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub birdtag-models-${StudentName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # DynamoDB Tables
  BirdTagMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub BirdTagMetadata-${StudentName}
      AttributeDefinitions:
        - AttributeName: fileKey
          AttributeType: S
      KeySchema:
        - AttributeName: fileKey
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub BirdTagUserPreferences-${StudentName}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Layers
  BirdDetectionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-detection-layer-${StudentName}
      Description: Bird detection model and dependencies
      ContentUri: layers/bird_detection/
      CompatibleRuntimes:
        - python3.9

  BirdNetAnalyzerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-analyzer-layer-${StudentName}
      Description: BirdNET analyzer model and dependencies
      ContentUri: layers/birdnet_analyzer/
      CompatibleRuntimes:
        - python3.11

  FFmpegLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub birdtag-ffmpeg-layer-${StudentName}
      Description: FFmpeg binary for media processing
      ContentUri: layers/ffmpeg/
      CompatibleRuntimes:
        - python3.9

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-auth-${StudentName}
      CodeUri: ./
      Handler: src/handlers/auth_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          IS_LOCAL: "true"
          JWT_SECRET: "local-test-secret"
          PYTHONPATH: "/var/task"
          USER_PREFERENCES_TABLE: !Ref UserPreferencesTable
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UserPreferencesTable
      Events:
        Register:
          Type: Api
          Properties:
            Path: /auth/register
            Method: post
        Login:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
        Verify:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: post

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/upload_handler.lambda_handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          UPLOAD_PREFIX: uploads/
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            BinaryMediaTypes:
              - '*/*'
            RequestParameters:
              - method.request.header.Content-Type: true
            RequestTemplates:
              '*/*': |
                {
                  "body": $util.base64Encode($input.body),
                  "headers": {
                    #foreach($header in $input.params().header.keySet())
                    "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
                    #end
                  },
                  "queryStringParameters": {
                    #foreach($param in $input.params().querystring.keySet())
                    "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                    #end
                  }
                }

  ThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-thumbnail-${StudentName}
      CodeUri: ./
      Handler: src/handlers/thumbnail_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BUCKET_NAME: !Ref MediaBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable

  MediaProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-processor-${StudentName}
      CodeUri: ./
      Handler: src/handlers/media_processor.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BUCKET_NAME: !Ref MediaBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Layers:
        - !Ref FFmpegLayer
        - !Ref BirdNETAnalyzerLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable

  # S3 Event Notifications
  ThumbnailFunctionS3Permission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - MediaBucket
      - ThumbnailFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ThumbnailFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MediaBucket.Arn

  MediaProcessorFunctionS3Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MediaBucket
      - MediaProcessorFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MediaProcessorFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MediaBucket.Arn

  # S3 Bucket Notification Configuration
  MediaBucketNotifications:
    Type: AWS::S3::BucketNotificationConfiguration
    DependsOn:
      - MediaBucket
      - ThumbnailFunctionS3Permission
      - MediaProcessorFunctionS3Permission
    Properties:
      Bucket: !Ref MediaBucket
      LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: uploads/
                - Name: suffix
                  Value: .jpg
                - Name: suffix
                  Value: .jpeg
                - Name: suffix
                  Value: .png
          Function: !GetAtt ThumbnailFunction.Arn
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: uploads/
                - Name: suffix
                  Value: .mp4
                - Name: suffix
                  Value: .avi
                - Name: suffix
                  Value: .mov
                - Name: suffix
                  Value: .wav
                - Name: suffix
                  Value: .mp3
                - Name: suffix
                  Value: .m4a
          Function: !GetAtt MediaProcessorFunction.Arn

  # Other Lambda Functions
  BirdDetectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-detection-${StudentName}
      CodeUri: ./
      Handler: src/handlers/bird_detection_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BUCKET_NAME: !Ref MediaBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
          SAGEMAKER_ENDPOINT: !Ref BirdDetectionEndpoint
      Layers:
        - !Ref BirdDetectionLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket
        - Statement:
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource: !GetAtt BirdDetectionEndpoint.Arn

  BirdNetAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-analyzer-${StudentName}
      CodeUri: ./
      Handler: src/handlers/birdnet_analyzer_lambda.lambda_handler
      Runtime: python3.11
      Layers:
        - !Ref BirdNetAnalyzerLayer
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MODEL_BUCKET: !Ref ModelBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
          SAGEMAKER_ENDPOINT: !Ref BirdNetAnalyzerEndpoint
          SAGEMAKER_AUDIO_ENDPOINT: !Ref AudioAnalysisEndpoint
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable
        - Statement:
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource: 
                - !GetAtt BirdNetAnalyzerEndpoint.Arn
                - !GetAtt AudioAnalysisEndpoint.Arn

  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-search-${StudentName}
      CodeUri: ./
      Handler: src/handlers/search_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          TABLE_NAME: !Ref BirdTagMetadataTable
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable
      Events:
        Search:
          Type: Api
          Properties:
            Path: /search
            Method: get
            RestApiId: !Ref Api
            Auth:
              Authorizer: CognitoAuthorizer

  StatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-stats-${StudentName}
      CodeUri: ./
      Handler: src/handlers/stats_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          TABLE_NAME: !Ref BirdTagMetadataTable
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
      Events:
        Stats:
          Type: Api
          Properties:
            Path: /stats
            Method: get
            RestApiId: !Ref Api
            Auth:
              Authorizer: CognitoAuthorizer

  ModelMonitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-monitor-${StudentName}
      CodeUri: ./
      Handler: src/handlers/model_monitor.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          TABLE_NAME: !Ref BirdTagMetadataTable
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BirdTagMetadataTable
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket

  FileClassifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-classifier-${StudentName}
      CodeUri: ./
      Handler: src/handlers/file_classifier.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BUCKET_NAME: !Ref MediaBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MediaBucket
        - S3ReadPolicy:
            BucketName: !Ref ModelBucket

  BatchProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-batch-${StudentName}
      CodeUri: ./
      Handler: src/handlers/batch_processor.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BUCKET_NAME: !Ref MediaBucket
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable

  TagFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub birdtag-tag-${StudentName}
      CodeUri: ./
      Handler: src/handlers/tag_handler.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          TABLE_NAME: !Ref BirdTagMetadataTable
          IS_LOCAL: "true"
          PYTHONPATH: "/var/task"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BirdTagMetadataTable
      Events:
        Tag:
          Type: Api
          Properties:
            Path: /tag
            Method: post
            RestApiId: !Ref Api
            Auth:
              Authorizer: CognitoAuthorizer

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # API Gateway Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub birdtag-authorizer-${StudentName}
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref Api
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # SageMaker Endpoints
  BirdDetectionEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Sub birdtag-detection-${StudentName}
      EndpointConfigName: !Ref BirdDetectionEndpointConfig

  BirdDetectionEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub birdtag-detection-config-${StudentName}
      ProductionVariants:
        - InitialVariantWeight: 1.0
          ModelName: !Ref BirdDetectionModel
          VariantName: AllTraffic
          InitialInstanceCount: 1
          InstanceType: ml.t2.medium

  BirdDetectionModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Sub birdtag-detection-model-${StudentName}
      PrimaryContainer:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bird-detection:latest
        ModelDataUrl: !Sub s3://${ModelBucket}/models/bird-detection/model.tar.gz
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn

  BirdNetAnalyzerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Sub birdtag-analyzer-${StudentName}
      EndpointConfigName: !Ref BirdNetAnalyzerEndpointConfig

  BirdNetAnalyzerEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub birdtag-analyzer-config-${StudentName}
      ProductionVariants:
        - InitialVariantWeight: 1.0
          ModelName: !Ref BirdNetAnalyzerModel
          VariantName: AllTraffic
          InitialInstanceCount: 1
          InstanceType: ml.t2.medium

  BirdNetAnalyzerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Sub birdtag-analyzer-model-${StudentName}
      PrimaryContainer:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/birdnet-analyzer:latest
        ModelDataUrl: !Sub s3://${ModelBucket}/models/birdnet-analyzer/model.tar.gz
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn

  AudioAnalysisEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Sub birdtag-audio-${StudentName}
      EndpointConfigName: !Ref AudioAnalysisEndpointConfig

  AudioAnalysisEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub birdtag-audio-config-${StudentName}
      ProductionVariants:
        - InitialVariantWeight: 1.0
          ModelName: !Ref AudioAnalysisModel
          VariantName: AllTraffic
          InitialInstanceCount: 1
          InstanceType: ml.t2.medium

  AudioAnalysisModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Sub birdtag-audio-model-${StudentName}
      PrimaryContainer:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/audio-analysis:latest
        ModelDataUrl: !Sub s3://${ModelBucket}/models/audio-analysis/model.tar.gz
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn

  # SageMaker Execution Role
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub birdtag-sagemaker-role-${StudentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  MediaBucketName:
    Description: S3 Bucket for media files
    Value: !Ref MediaBucket

  ModelBucketName:
    Description: S3 Bucket for model files
    Value: !Ref ModelBucket

  UserPreferencesTableName:
    Description: DynamoDB User Preferences Table Name
    Value: !Ref UserPreferencesTable

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/

  BirdDetectionEndpointName:
    Description: SageMaker Bird Detection Endpoint Name
    Value: !Ref BirdDetectionEndpoint

  BirdNetAnalyzerEndpointName:
    Description: SageMaker BirdNet Analyzer Endpoint Name
    Value: !Ref BirdNetAnalyzerEndpoint

  AudioAnalysisEndpointName:
    Description: SageMaker Audio Analysis Endpoint Name
    Value: !Ref AudioAnalysisEndpoint
